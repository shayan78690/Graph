class DisjointSet {
    int rank[];
    int size[];
    int parent[];

    public DisjointSet(int n) {
        rank = new int[n+1];
        size = new int[n+1];
        parent = new int[n+1];

        for(int i = 0; i < n; i++) {
            rank[i] = 0;
            parent[i] = i;
            size[i] = 1;
        }
    }

    public int findParent(int u) {
        if(u == parent[u]) {
            return u;
        }
        return parent[u] = findParent(parent[u]);
    }

    public void unionByRank(int u, int v) {
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);

        if(ulp_u == ulp_v) {
            return;
        }
        if(rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        } else if(rank[ulp_u] > rank[ulp_v]) {
            parent[ulp_v] = ulp_u;
        } else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    public void unionBySize(int u, int v) {
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);

        if(ulp_u == ulp_v) {
            return;
        } 
        if(size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        } else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
}

class Solution {
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        DisjointSet ds = new DisjointSet(V);
        for(int i = 0; i < V; i++) {
            for(int j = 0; j < V; j++) {
                if(adj.get(i).get(j) == 1) {
                    ds.unionByRank(i, j);
                }
            }
        }
        
        
        int count = 0;
        for(int i = 0; i < V; i++) {
            if(ds.findParent(i) == i) {
                count++;
            }
        }
        return count;
    }
};
