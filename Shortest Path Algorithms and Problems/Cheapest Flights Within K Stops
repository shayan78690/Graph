class Solution {

    class Pair {
        int first;
        int second;

        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    class Tuple {
        int first;
        int second;
        int third;

        Tuple(int first, int second, int third) {
            this.first = first;
            this.second = second;
            this.third = third;
        }
    }

    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < flights.length; i++) {
            int u = flights[i][0];
            int v = flights[i][1];
            int w = flights[i][2];

            adj.get(u).add(new Pair(v, w));
        }
        int distance[] = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = (int) (1e9);
        }
        distance[src] = 0;
        Queue<Tuple> q = new LinkedList<>();
        q.add(new Tuple(0, src, 0));
        while (!q.isEmpty()) {
            Tuple t = q.poll();
            int steps = t.first;
            int node = t.second;
            int dist = t.third;

            if (steps > k) {
                continue;
            }
            for (Pair neighbour : adj.get(node)) {
                int adjNode = neighbour.first;
                int edgeWeight = neighbour.second;

                if (dist + edgeWeight < distance[adjNode] && steps <= k) {
                    distance[adjNode] = dist + edgeWeight;
                    q.add(new Tuple(steps + 1, adjNode, dist + edgeWeight));
                }
            }
        }
        if (distance[dst] == (int) (1e9)) {
            return -1;
        }
        return distance[dst];
    }
}
