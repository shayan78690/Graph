class Solution {
    class Pair {
        int first; // steps taken
        int second; // current value

        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    int minimumMultiplications(int[] arr, int start, int end) {
        int mod = 100000;
        int[] distance = new int[mod];

        // Initialize distance array with infinity
        for (int i = 0; i < mod; i++) {
            distance[i] = Integer.MAX_VALUE;
        }
        distance[start] = 0;

        // Edge case: if start is already the end, no multiplication needed
        if (start == end) {
            return 0;
        }

        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(0, start));

        while (!q.isEmpty()) {
            Pair p = q.poll();
            int steps = p.first;
            int node = p.second;

            // Explore all possibilities from current node
            for (int i = 0; i < arr.length; i++) {
                int value = (arr[i] * node) % mod;

                // If this new path is better (distance is smaller), explore it
                if (steps + 1 < distance[value]) {
                    distance[value] = steps + 1;
                    q.add(new Pair(steps + 1, value));

                    // Early exit condition if we reach the target node
                    if (value == end) {
                        return steps + 1;
                    }
                }
            }
        }

        return -1; // If no path exists
    }
}
