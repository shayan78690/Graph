class Solution { 

    class Pair implements Comparable<Pair>{
        int d;
        int n;
        Pair(int d, int n) {
            this.d = d;
            this.n = n;
        }
        public int compareTo(Pair that) {
            return this.d - that.d;
        }
    }

    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i = 0; i <= n; i++) {
            adj.add(new ArrayList<>());
        }
        for(int i = 0; i < times.length; i++) {
            int u = times[i][0];
            int v = times[i][1];
            int w = times[i][2];

            adj.get(u).add(new Pair(w, v));

        }

        int time[] = new int[n+1];
        for(int i = 0; i <= n; i++) {
            time[i] = Integer.MAX_VALUE;
        }
        time[k] = 0;
        PriorityQueue<Pair> pq = new PriorityQueue<>();

        pq.add(new Pair(0, k));
        while(!pq.isEmpty()) {
            Pair p = pq.poll();
            int dist = p.d;
            int node = p.n;

            for(Pair neighbour : adj.get(node)) {
                int t = neighbour.d;
                int adjNode = neighbour.n;

                if(dist + t < time[adjNode]) {
                    time[adjNode] = dist + t;
                    pq.add(new Pair(dist+t, adjNode));
                }
            }
        }

        int res = Integer.MIN_VALUE;
        for(int i = 1; i < time.length; i++) {
            res = Math.max(res, time[i]);
        }
        return res == Integer.MAX_VALUE? -1 : res;
    }
}
