class Solution {
    class Tuple {
        int first;
        int second;
        int third;
        
        Tuple(int first, int second, int third) {
            this.first = first;
            this.second = second;
            this.third = third;
        }
    }

    int shortestPath(int[][] grid, int[] source, int[] destination) {
        if(source[0] == destination[0] && source[1] == destination[1]) {
            return 0;
        } 
        int n = grid.length;
        int m = grid[0].length;
        Queue<Tuple> q = new LinkedList<>();
        int distance[][] = new int[n][m];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                distance[i][j] = (int)(1e9);
            }
        }
        distance[source[0]][source[1]] = 0;
        q.add(new Tuple(0, source[0], source[1]));
        
        int rowMoves[] = {0, -1, 0, +1};
        int colMoves[] = {-1, 0, +1, 0};
        
        while(!q.isEmpty()) {
            Tuple t = q.poll();
            int dist = t.first;
            int row = t.second;
            int col = t.third;
            
            for(int i = 0; i < 4; i++) {
                int nRow = row + rowMoves[i];
                int nCol = col + colMoves[i];
                if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && grid[nRow][nCol] == 1 && dist + 1 < distance[nRow][nCol]) {
                    distance[nRow][nCol] = dist + 1;
                    if(nRow == destination[0] && nCol == destination[1]) {
                        return dist + 1;
                    }
                    q.add(new Tuple(dist+1, nRow, nCol));
                }
            }
        }
        return -1;
    }
}
