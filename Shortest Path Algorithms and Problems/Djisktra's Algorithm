class Solution {
    class Pair implements Comparable<Pair>{
        int distance;
        int node;
        
        Pair(int distance, int node) {
            this.distance = distance;
            this.node = node;
        }
        
        public int compareTo(Pair that) {
            return this.distance - that.distance;
        }
    }
    public int[] dijkstra(int V, int[][] edges, int src) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for(int i = 0; i < edges.length; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            int w = edges[i][2];
            
            adj.get(u).add(new Pair(w, v));
            adj.get(v).add(new Pair(w, u));
        }
        
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        
        int distance[] = new int[V];
        for(int i = 0; i < V; i++) {
            distance[i] = (int)(1e9);
        }
        distance[src] = 0;
        pq.offer(new Pair(0, src));
        
        while(pq.size() != 0) {
            Pair p = pq.poll();
            int currentDistance = p.distance;
            int node = p.node;
            
            for(Pair neighbour : adj.get(node)) {
                int edgeWeight = neighbour.distance;
                int adjNode = neighbour.node;
                
                if(edgeWeight + currentDistance < distance[adjNode]) {
                    distance[adjNode] = edgeWeight + currentDistance;
                    pq.offer(new Pair(distance[adjNode], adjNode));
                }
            }
        }
        return distance;
    }
}
