class Solution {

    class Pair {
        String first;
        int second;

        Pair(String first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        int n = wordList.size();
        Set<String> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            set.add(wordList.get(i));
        }
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(beginWord, 1));
        set.remove(beginWord);

        while (!q.isEmpty()) {
            Pair p = q.poll();
            String word = p.first;
            int steps = p.second;
            if (word.equals(endWord)) {
                return steps;
            }

            char[] wordChars = word.toCharArray();
            for (int i = 0; i < word.length(); i++) {
                char originalChar = wordChars[i];
                for (char ch = 'a'; ch <= 'z'; ch++) {
                    wordChars[i] = ch;
                    String newWord = new String(wordChars);

                    if (set.contains(newWord)) {
                        set.remove(newWord);
                        q.offer(new Pair(newWord, steps + 1));
                    }
                }
                wordChars[i] = originalChar;
            }
        }
        return 0;
    }
}













class Solution {
    
    class Pair {
        String first;
        int second;
        
        Pair(String first, int second) {
            this.first = first;
            this.second = second;
        }
    }
    
    public int wordLadderLength(String startWord, String targetWord,
                                String[] wordList) {
        int n = wordList.length;
        Set<String> set = new HashSet<>();
        for(int i = 0; i < n; i++) {
            set.add(wordList[i]);
        }
        
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(startWord, 1));
        set.remove(startWord);
        while(!q.isEmpty()) {
            Pair p = q.poll();
            String word = p.first;
            int steps = p.second;
            
            if(word.equals(targetWord)) {
                return steps;
            }
            
            for(int i = 0; i < word.length(); i++) {
                for(char ch = 'a'; ch <= 'z'; ch++) {
                    char replacedArray[] = word.toCharArray();
                    replacedArray[i] = ch;
                    String replacedWord = new String(replacedArray);
                    
                    if(set.contains(replacedWord)) {
                        set.remove(replacedWord);
                        q.add(new Pair(replacedWord, steps+1));
                    }
                }
            }
        }
        return 0;
    }
}
