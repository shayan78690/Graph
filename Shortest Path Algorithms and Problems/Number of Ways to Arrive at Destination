class Solution {
  public int countPaths(int n, int[][] roads) {
    List<Pair<Integer, Integer>>[] graph = new List[n];

    for (int i = 0; i < n; i++)
      graph[i] = new ArrayList<>();

    for (int[] road : roads) {
      final int u = road[0];
      final int v = road[1];
      final int w = road[2];
      graph[u].add(new Pair<>(v, w));
      graph[v].add(new Pair<>(u, w));
    }

    return dijkstra(graph, 0, n - 1);
  }

  private int dijkstra(List<Pair<Integer, Integer>>[] graph, int src, int dst) {
    final int MOD = 1_000_000_007;
    long[] ways = new long[graph.length];
    Arrays.fill(ways, 0);
    long[] dist = new long[graph.length];
    Arrays.fill(dist, Long.MAX_VALUE);

    ways[src] = 1;
    dist[src] = 0;
    Queue<Pair<Long, Integer>> minHeap =
        new PriorityQueue<>(Comparator.comparingLong(Pair::getKey)) {
          { offer(new Pair<>(dist[src], src)); }
        };

    while (!minHeap.isEmpty()) {
      final long d = minHeap.peek().getKey();
      final int u = minHeap.poll().getValue();
      if (d > dist[u])
        continue;
      for (Pair<Integer, Integer> pair : graph[u]) {
        final int v = pair.getKey();
        final int w = pair.getValue();
        if (d + w < dist[v]) {
          dist[v] = d + w;
          ways[v] = ways[u];
          minHeap.offer(new Pair<>(dist[v], v));
        } else if (d + w == dist[v]) {
          ways[v] += ways[u];
          ways[v] %= MOD;
        }
      }
    }

    return (int) ways[dst];
  }
}










class Solution {

    class Pair implements Comparable<Pair> {
        int first;
        int second;

        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }

        public int compareTo(Pair that) {
            return this.first - that.first;
        }
    }
    public int countPaths(int n, int[][] roads) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        int m = roads.length;
        for (int[] road : roads) {
          int u = road[0];
          int v = road[1];
          int w = road[2];
          adj.get(u).add(new Pair(w, v));
          adj.get(v).add(new Pair(w, u));
    }

    return dijkstra(adj, 0, n - 1);
    }
    public int dijkstra(ArrayList<ArrayList<Pair>> adj, int src, int dest) {
        int MOD = 1_000_000_007;
        long distance[] = new long[adj.size()];
        long ways[] = new long[adj.size()];
        Arrays.fill(distance, Long.MAX_VALUE);
        Arrays.fill(ways, 0);
        distance[src] = 0;
        ways[src] = 1;

        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(0, src));
        while(!pq.isEmpty()) {
            Pair p = pq.poll();
            int dist = p.first;
            int node = p.second;
            if(dist > distance[node]) {
                continue;
            }
            for(Pair neighbour : adj.get(node)) {
                int cost = neighbour.first;
                int adjNode = neighbour.second;
                if(cost + dist < distance[adjNode]) {
                    distance[adjNode] = cost + dist;
                    pq.add(new Pair(cost + dist, adjNode));
                    ways[adjNode] = ways[node];
                } else if(cost + dist == distance[adjNode]) {
                    ways[adjNode] = (ways[adjNode] + ways[node]) % MOD;
                }
            }
        }
        return (int)ways[dest];
    }
}
