class Solution {
    
    class Pair {
        int first;
        int second;
        
        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    public int[] shortestPath(int V, int E, int[][] edges) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++) {
            ArrayList<Pair> temp = new ArrayList<>();
            adj.add(temp);
        }
        
        for(int i = 0; i < E; i++) {
    int u = edges[i][0];
    int v = edges[i][1];
    int w = edges[i][2];
    adj.get(u).add(new Pair(v, w));
}

        
        int visited[] = new int[V];
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i < V; i++) {
            if(visited[i] == 0) {
                dfs(i, visited, adj, stack);
            }
        }
        
        int distance[] = new int[V];
        for(int i = 0; i < V; i++) {
            distance[i] = (int)(1e9);
        }
        
        distance[0] = 0;
        while(!stack.isEmpty()) {
            int node = stack.pop();
            for(int i = 0; i < adj.get(node).size(); i++) {
                int v = adj.get(node).get(i).first;
                int w = adj.get(node).get(i).second;
                
                if(distance[node] + w < distance[v]) {
                    distance[v] = distance[node] + w;
                }
            }
        }
        for (int i = 0; i < V; i++) {
            if (distance[i] == (int) 1e9) {
                distance[i] = -1;
            }
        }
        return distance;
    }
    
    public void dfs(int start, int visited[], ArrayList<ArrayList<Pair>> adj, Stack<Integer> stack) {
        visited[start] = 1;
        for(int i = 0; i < adj.get(start).size(); i++) {
            int v = adj.get(start).get(i).first;
            if(visited[v] == 0) {
                dfs(v, visited, adj, stack);
            }
        }
        stack.push(start);
    }
}
