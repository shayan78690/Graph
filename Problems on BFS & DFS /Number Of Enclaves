class Solution {
    
    void dfs(int row, int col, int grid[][], int visited[][], int delRow[], int delCol[]) {
        visited[row][col] = 1;
        int n = grid.length;
        int m = grid[0].length;
        
        for(int i = 0; i < 4; i++) {
            int nRow = row + delRow[i];
            int nCol = col + delCol[i];
            
            if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && visited[nRow][nCol] == 0 && grid[nRow][nCol] == 1) {
                dfs(nRow, nCol, grid, visited, delRow, delCol);
            }
        }
    }

    int numberOfEnclaves(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int visited[][] = new int[n][m];
        int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, +1, 0, -1};
        
        for(int j = 0; j < m; j++) {
            if(grid[0][j] == 1) {
                dfs(0, j, grid, visited, delRow, delCol);
            }
            if(grid[n-1][j] == 1) {
                dfs(n-1, j, grid, visited, delRow, delCol);
            }
        }
        
        for(int i = 0; i < n; i++) {
            if(grid[i][0] == 1) {
                dfs(i, 0, grid, visited, delRow, delCol);
            }
            if(grid[i][m-1] == 1) {
                dfs(i, m-1, grid, visited, delRow, delCol);
            }
        }
        
        int cells = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(visited[i][j] == 0 && grid[i][j] == 1) {
                    cells++;
                }
            }
        }
        return cells;
    }
}
