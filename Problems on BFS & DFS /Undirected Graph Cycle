class Solution {
    
    class Pair {
        int first;
        int second;
        
        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }
    
    public boolean isCycle(int V, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        
        for(int i = 0; i < edges.length; i++) {
    int u = edges[i][0];
    int v = edges[i][1];
    adj.get(u).add(v);
    adj.get(v).add(u);
}

        
        boolean visited[] = new boolean[V];
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                if(bfs(i, V, adj, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean bfs(int src, int V, ArrayList<ArrayList<Integer>> adj, boolean visited[]) {
        visited[src] = true;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(src, -1));
        
        while(!q.isEmpty()) {
            Pair p = q.poll();
            int node = p.first;
            int parent = p.second;
            
            for(int adjNode : adj.get(node)) {
                if(!visited[adjNode]) {
                    visited[adjNode] = true;
                    q.add(new Pair(adjNode, node));
                } else if(parent != adjNode) {
                    return true;
                }
            }
        }
        return false;
    }
}
