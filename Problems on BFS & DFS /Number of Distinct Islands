class Solution {
    static class Pair {
        int first;
        int second;
        
        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }
    
    void dfs(int row, int col, int grid[][], int visited[][], ArrayList<String> list, int delRow[], int delCol[], int row0, int col0) {
        visited[row][col] = 1;
        list.add(toString(row-row0, col-col0));
        
        int n = grid.length;
        int m = grid[0].length;
        
        for(int i = 0; i < 4; i++) {
            int nRow = row + delRow[i];
            int nCol = col + delCol[i];
            if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && visited[nRow][nCol] == 0 && grid[nRow][nCol] == 1) {
                dfs(nRow, nCol, grid, visited, list, delRow, delCol, row0, col0);
            }
        }
    }
    
    String toString(int row, int col) {
        return Integer.toString(row) + " " + Integer.toString(col);
    }

    int countDistinctIslands(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int visited[][] = new int[n][m];
        HashSet<ArrayList<String>> set = new HashSet<>();
        int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, -1, 0, +1};
        
        for(int i = 0; i < n; i++) {
          for(int j = 0; j < m; j++) {
            if(visited[i][j] == 0 && grid[i][j] == 1) {
            ArrayList<String> list = new ArrayList<>();
            dfs(i, j, grid, visited, list, delRow, delCol, i, j);
            set.add(list);
        }
    }
}
