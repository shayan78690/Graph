class Solution {

    class Pair {
        int first;
        int second;
        int time;

        Pair(int first, int second, int time) {
            this.first = first;
            this.second = second;
            this.time = time;
        }
    }

    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        Queue<Pair> q = new LinkedList<>();
        int visited[][] = new int[n][m];

        int freshCount = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.add(new Pair(i, j, 0));
                    visited[i][j] = 2;
                } else {
                    visited[i][j] = 0;
                }

                if (grid[i][j] == 1) {
                    freshCount++;
                }
            }
        }

        int time = 0;
        int delRow[] = { -1, 0, +1, 0 };
        int delCol[] = { 0, +1, 0, -1 };
        int count = 0;
        while (!q.isEmpty()) {
            Pair p = q.poll();
            int r = p.first;
            int c = p.second;
            int t = p.time;
            time = Math.max(time, t);

            for (int i = 0; i < 4; i++) {
                int nRow = r + delRow[i];
                int nCol = c + delCol[i];

                if (nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && visited[nRow][nCol] == 0
                        && grid[nRow][nCol] == 1) {
                    q.add(new Pair(nRow, nCol, t + 1));
                    visited[nRow][nCol] = 2;
                    count++;
                }
            }
        }
        if (count != freshCount) {
            return -1;
        }
        return time;
    }
}
