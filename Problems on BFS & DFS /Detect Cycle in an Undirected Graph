import java.util.List;
public class Solution {
    static class Graph {
        boolean detectCycle(int V, List<List<Integer>> adj) {
            int visited[] = new int[V];
            for(int i = 0; i < V; i++) {
                if(visited[i] == 0) {
                    if(dfs(i, -1, visited, adj)) {
                        return true;
                    }
                }
            }
            return false;
        }

        static boolean dfs(int node, int parent, int visited[], List<List<Integer>> adj) {
            visited[node] = 1;
            for(Integer adjacentNode : adj.get(node)) {
                if(visited[adjacentNode] == 0) {
                    if(dfs(adjacentNode, node, visited, adj)) {
                        return true;
                    }
                } else if(adjacentNode != parent) {
                    return true;
                }
            }
            return false;
        }
        
    };
}
