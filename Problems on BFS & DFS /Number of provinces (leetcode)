class Solution {
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        ArrayList<ArrayList<Integer>> adjLs = new ArrayList<ArrayList<Integer>>(); 
        for(int i = 0;i<V;i++) {
            adjLs.add(new ArrayList<Integer>()); 
        }
        
        // to change adjacency matrix to list 
        for(int i = 0;i<V;i++) {
            for(int j = 0;j<V;j++) {
                // self nodes are not considered 
                if(adj.get(i).get(j) == 1 && i != j) {
                    adjLs.get(i).add(j); 
                    adjLs.get(j).add(i); 
                }
            }
        }
        
        int count = 0;
        boolean visited[] = new boolean[V];
        
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                count++;
                dfs(i, visited, adjLs);
            }
        }
        return count;
    }

    static void dfs(int node, boolean visited[], ArrayList<ArrayList<Integer>> adj) {
        visited[node] = true;
        for (Integer it : adj.get(node)) { 
            if (!visited[it]) {
                dfs(it, visited, adj);
            }
        }
    }
}









class Solution {
    public int findCircleNum(int[][] isConnected) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < isConnected.length; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < isConnected.length; i++) {
            for (int j = 0; j < isConnected.length; j++) {
                if (isConnected[i][j] == 1 && i != j) {
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }

        int count = 0;
        boolean visited[] = new boolean[adj.size()];
        for (int i = 0; i < adj.size(); i++) {
            if (!visited[i]) {
                count++;
                bfs(i, adj, visited);
            }
        }
        return count;
    }

    public void bfs(int node, ArrayList<ArrayList<Integer>> adj, boolean visited[]) {
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        visited[node] = true;

        while (!q.isEmpty()) {
            Integer n = q.poll();
            for (Integer it : adj.get(n)) {
                if (!visited[it]) {
                    visited[it] = true;
                    q.add(it);
                }
            }
        }
    }
}
