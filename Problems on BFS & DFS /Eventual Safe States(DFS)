class Solution {
    
    boolean dfs(int start, int visited[], int pathVisited[], List<List<Integer>> adj, int check[]) {
        visited[start] = 1;
        pathVisited[start] = 1;
        check[start] = 0;
        
        for(int it : adj.get(start)) {
            if(visited[it] == 0) {
                if(dfs(it, visited, pathVisited, adj, check)) {
                    return true;
                }
            }
            else if(pathVisited[it] == 1) {
                return true;
            }
        }
        check[start] = 1;
        pathVisited[start] = 0;
        return false;
    }

    List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {
        int visited[] = new int[V];
        int pathVisited[] = new int[V];
        int check[] = new int[V];
        
        for(int i = 0; i < V; i++) {
            if(visited[i] == 0) {
                dfs(i, visited, pathVisited, adj, check);
            }
        }
        
        List<Integer> safeNodes = new ArrayList<>();
        for(int i = 0; i < V; i++) {
            if(check[i] == 1) {
                safeNodes.add(i);
            }
        }
        return safeNodes;
    }
}
