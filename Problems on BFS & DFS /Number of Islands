class Solution {
    class Pair {
        int first;
        int second;
        
        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }
    public int countIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int visited[][] = new int[n][m];
        int count = 0;
        for(int row = 0; row < n; row++) {
            for(int col = 0; col < m; col++) {
                if(visited[row][col] == 0 && grid[row][col] == 'L') {
                    bfs(row, col, visited, grid);
                    count++;
                }
            }
        }
        return count;
    }
    
    public void bfs(int row, int col, int visited[][], char grid[][]) {
        visited[row][col] = 1;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(row, col));
        int n = grid.length;
        int m = grid[0].length;
        
        
        while(!q.isEmpty()) {
            Pair p = q.poll();
            int r = p.first;
            int c = p.second;
            
            for(int delRow = -1; delRow <= 1; delRow++) {
                for(int delCol = -1; delCol <= 1; delCol++) {
                    int nRow = delRow + r;
                    int nCol = delCol + c;
                    if((nRow >= 0 && nRow < n) && (nCol >= 0 && nCol < m) && (visited[nRow][nCol] == 0) && (grid[nRow][nCol] == 'L')) {
                        visited[nRow][nCol] = 1;
                        q.add(new Pair(nRow, nCol));
                    }
                }
            }
        }
    }





class Solution {

    class Pair {
        int first;
        int second;

        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int visited[][] = new int[n][m];
        int count = 0;
        for (int row = 0; row < n; row++) {
            for (int col = 0; col < m; col++) {
                if (visited[row][col] == 0 && grid[row][col] == '1') {
                    dfs(row, col, visited, grid);
                    count++;
                }
            }
        }
        return count;
    }

    public void dfs(int row, int col, int visited[][], char grid[][]) {
        visited[row][col] = 1;
        int n = grid.length;
        int m = grid[0].length;

        int[] delRow = { -1, 1, 0, 0 };
        int[] delCol = { 0, 0, -1, 1 };

        for (int i = 0; i < 4; i++) {
            int nRow = row + delRow[i];
            int nCol = col + delCol[i];

            if (nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && visited[nRow][nCol] == 0 && grid[nRow][nCol] == '1') {
                dfs(nRow, nCol, visited, grid);
            }
        }
    }
}

