class Solution {
    public boolean isCyclic(int V, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v); 
        }

        int[] visited = new int[V];
        int[] pathVisited = new int[V];

        for (int i = 0; i < V; i++) {
            if (visited[i] == 0) {
                if (dfs(i, visited, pathVisited, adj)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean dfs(int node, int[] visited, int[] pathVisited, List<List<Integer>> adj) {
        visited[node] = 1;
        pathVisited[node] = 1;

        for (int neighbor : adj.get(node)) {
            if (visited[neighbor] == 0) {
                if (dfs(neighbor, visited, pathVisited, adj)) {
                    return true;
                }
            } else if (pathVisited[neighbor] == 1) {
                return true; // cycle detected
            }
        }

        pathVisited[node] = 0; // backtrack
        return false;
    }
}
