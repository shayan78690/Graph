class Solution {
    
    static void dfs(int row, int col, char mat[][], int visited[][], int delRow[], int delCol[]) {
        visited[row][col] = 1;
        int n = mat.length;
        int m = mat[0].length;
        
        for(int i = 0; i < 4; i++) {
            int nRow = row + delRow[i];
            int nCol = col + delCol[i];
            
            if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && visited[nRow][nCol] == 0 && mat[nRow][nCol] == 'O') {
                dfs(nRow, nCol, mat, visited, delRow, delCol);
            }
        }
    }
    static char[][] fill(char mat[][]) {
        int n = mat.length;
        int m = mat[0].length;
        int visited[][] = new int[n][m];
        int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, +1, 0, -1};
        
        for(int j = 0; j < m; j++) {
            if(mat[0][j] == 'O') {
                dfs(0, j, mat, visited, delRow, delCol);
            }
            if(mat[n-1][j] == 'O') {
                dfs(n-1, j, mat, visited, delRow, delCol);
            }
        }
        
        for(int i = 0; i < n; i++) {
            if(mat[i][0] == 'O') {
                dfs(i, 0, mat, visited, delRow, delCol);
            }
            if(mat[i][m-1] == 'O') {
                dfs(i, m-1, mat, visited, delRow, delCol);
            }
        }
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(visited[i][j] == 0 && mat[i][j] == 'O') {
                    mat[i][j] = 'X';
                }
            }
        }
        
        return mat;
    }
