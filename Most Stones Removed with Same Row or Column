class Solution {
    public int removeStones(int[][] stones) {
        int n = stones.length;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                if(stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]) {
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        
        int visited[] = new int[n];
        int components = 0;
        for(int i = 0; i < n; i++) {
            if(visited[i] == 0) {
                dfs(i, adj, visited);
                components++;
            }
        }
        return n - components;
    }

    public void dfs(int start, ArrayList<ArrayList<Integer>> adj, int visited[]) {
        visited[start] = 1;
        for(int neighbour : adj.get(start)) {
            if(visited[neighbour] == 0) {
                dfs(neighbour, adj, visited);
            }
        }
    }
}
