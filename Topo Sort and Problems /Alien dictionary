import java.util.*;

public class Solution {

    public static ArrayList<Integer> findTopo(int V, ArrayList<ArrayList<Integer>> adj) {
        int indegree[] = new int[V];
        for(int i = 0; i < V; i++) {
            for(int it : adj.get(i)) {
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < V; i++) {
            if(indegree[i] == 0) {
                q.add(i);
            }
        }

        ArrayList<Integer> topo = new ArrayList<>();
        while(!q.isEmpty()) {
            int node = q.poll();
            topo.add(node);
            for(int it : adj.get(node)) {
                indegree[it]--;
                if(indegree[it] == 0) {
                    q.add(it);
                }
            }
        }
        return topo;
    }

    public static String getAlienLanguage(String []dictionary, int k) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < k; i++) {
            adj.add(new ArrayList<>());
        }

        for(int i = 0; i < dictionary.length-1; i++) {
            String s1 = dictionary[i];
            String s2 = dictionary[i+1];
            int len = Math.min(s1.length(), s2.length());
            for(int j = 0; j < len; j++) {
                if(s1.charAt(j) != s2.charAt(j)) {
                    adj.get(s1.charAt(j) -'a').add(s2.charAt(j) - 'a');
                    break;
                }
            }
        }

        ArrayList<Integer> topo = findTopo(k, adj);
        String ans = "";
        for(int it : topo) {
            ans = ans + (char)(it + (int)('a'));
        }
        return ans;
    }
}
