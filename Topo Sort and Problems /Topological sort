class Solution {
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for(int edge[] : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
        }
        
        int visited[] = new int[V];
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i < V; i++) {
            if(visited[i] == 0) {
                dfs(i, visited, stack, adj);
            }
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        while(!stack.isEmpty()) {
            ans.add(stack.pop());
        }
        return ans;
    }
    
    public static void dfs(int start, int visited[], Stack<Integer> stack, ArrayList<ArrayList<Integer>> adj) {
        visited[start] = 1;
        for(int it : adj.get(start)) {
            if(visited[it] == 0) {
                dfs(it, visited, stack, adj);
            }
        }
        stack.push(start);
    }
}
